package com.baselet.our;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.Mockito;

import com.baselet.control.Main;
import com.baselet.control.basics.geom.Point;
import com.baselet.diagram.DiagramHandler;
import com.baselet.element.elementnew.uml.Class;
import com.baselet.element.interfaces.GridElement;
import com.baselet.element.relation.Relation;
import com.baselet.gui.command.Move;
import com.baselet.standalone.gui.StandaloneGUI;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * Â© 2017, Gopper
 */
public class OpenTest {
	private File file;

	@Before
	public void init() {
		String name = "example.uxf";
		file = getFile(name);

		assertNotNull("The example UXF file shouldn't be null", file);
	}

	private void testVehicle(Class vehicle) {
		Class mockVehicle = mock(Class.class);
		when(mockVehicle.getPanelAttributes()).thenReturn("Vehicle\n--\n--\n+ move(double) : void\n+ stop() : void\n+ turn (double) : void");
		assertEquals(vehicle.getPanelAttributes(), mockVehicle.getPanelAttributes());
	}

	private void testCar(Class car) {
		Class mockCar = mock(Class.class);
		when(mockCar.getPanelAttributes()).thenReturn("Car\n--\n- milage : double\n- speed : double\n--\n+ move(double) : void\n+ stop() : void\n+ setSpeedMph(double) : void\n+ getSpeedMph() : double\n+ getSpeeddKph() : double\n- setMilage(double) : void");
		assertEquals(car.getPanelAttributes(), mockCar.getPanelAttributes());
	}

	private void testBicycle(Class bicycle) {
		Class mockBicycle = mock(Class.class);
		when(mockBicycle.getPanelAttributes()).thenReturn("Bicycle");
		assertEquals(bicycle.getPanelAttributes(), mockBicycle.getPanelAttributes());
	}

	private void testRollerSkates(Class rollerSkates) {
		Class mockRollerSkates = mock(Class.class);
		when(mockRollerSkates.getPanelAttributes()).thenReturn("RollerSkates");
		assertEquals(rollerSkates.getPanelAttributes(), mockRollerSkates.getPanelAttributes());
	}

	private void testAxle(Class axle) {
		Class mockAxle = mock(Class.class);
		when(mockAxle.getPanelAttributes())
			.thenReturn("Axle\n--\n--\n+ addWheel() : void\n+ spin() : void\n");
		assertEquals(axle.getPanelAttributes(), mockAxle.getPanelAttributes());
	}


	private void testStationWagon(Class stationWagon) {
		Class mockStationWagon = mock(Class.class);
		when(mockStationWagon.getPanelAttributes()).thenReturn("StationWagon\n--\n--\n+ openTailgate() : void");
		assertEquals(stationWagon.getPanelAttributes(), mockStationWagon.getPanelAttributes());
	}

	private void testSportsCar(Class sportsCar) {
		Class mockSportsCar = mock(Class.class);
		when(mockSportsCar.getPanelAttributes()).thenReturn("SportsCar\n--\n--\n+ pressClutch() : void\n+ useNitro() : void");
		assertEquals(sportsCar.getPanelAttributes(), mockSportsCar.getPanelAttributes());
	}

	private void testWheel(Class wheel) {
		Class mockWheel = mock(Class.class);
		when(mockWheel.getPanelAttributes()).thenReturn("Wheel\n--\n--\n+ roll() : void\n");
		assertEquals(wheel.getPanelAttributes(), mockWheel.getPanelAttributes());
	}


	@Test
	public void open() throws IOException {
		DiagramHandler diagram = new DiagramHandler(file);
		List<GridElement> elements = diagram.getDrawPanel().getGridElements();
		Iterator<GridElement> iterator = elements.iterator();
		while(iterator.hasNext()) {
			GridElement ele = iterator.next();
			if(ele instanceof Relation) {
				Relation relation = (Relation) ele;

				String attr = relation.getAdditionalAttributes();
				if(attr.equals("10.0;10.0;90.0;230.0")) {
					assertEquals(relation.getPanelAttributes(), "lt=<<-");
				} else if(attr.equals("100.0;10.0;10.0;230.0")) {
					assertEquals(relation.getPanelAttributes(), "lt=<<-");
				} else if(attr.equals("110.0;70.0;10.0;10.0")) {
					assertEquals(relation.getPanelAttributes(), "lt=<-\nm1=1..n");
				}  else if(attr.equals("80.0;10.0;10.0;10.0")) {
					assertEquals(relation.getPanelAttributes(), "lt=<-\nm1=1, 2");
				}  else if(attr.equals("130.0;10.0;10.0;100.0")) {
					assertEquals(relation.getPanelAttributes(), "lt=<<-");
				}  else if(attr.equals("10.0;10.0;200.0;100.0")) {
					assertEquals(relation.getPanelAttributes(), "lt=<<-");
				}  else if(attr.equals("10.0;10.0;310.0;100.0")) {
					assertEquals(relation.getPanelAttributes(), "lt=<<-");
				}
			} else if (ele instanceof Class) {
				Class c = (Class) ele;
				String attributes = c.getPanelAttributesAsList().get(0);
				if(attributes.equals("Vehicle")) {
					testVehicle(c);
				} else if (attributes.equals("Car")){
					testCar(c);
				} else if (attributes.equals("Bicycle")){
					testBicycle(c);
				} else if (attributes.equals("RollerSkates")){
					testRollerSkates(c);
				} else if (attributes.equals("Axle")) {
					testAxle(c);
				} else if(attributes.equals("Wheel")) {
					testWheel(c);
				} else if(attributes.equals("SportsCar")) {
					testSportsCar(c);
				} else if(attributes.equals("StationWagon")) {
					testStationWagon(c);
				} else {
					System.out.println("NOT: "+c.getPanelAttributes());
				}
			}
		}
	}

	private File getFile(String name) {
		ClassLoader loader = getClass().getClassLoader();
		URL url = loader.getResource(name);
		assertNotNull("The resource URL shouldn't be null", url);
		return new File(url.getFile());
	}
}
